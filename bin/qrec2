#!/usr/bin/env python3

import os
import re
import shutil
from tempfile import mkdtemp, NamedTemporaryFile, mktemp
import subprocess
from argparse import ArgumentParser, FileType
from qdrill import *

parser = ArgumentParser(description="Quickly record list of short sounds.")
parser.add_argument('infile', nargs='?', type=FileType('r'))
parser.add_argument('-o', '--outdir', nargs='?', default='./qrec')
parser.add_argument('-r', '--recdir', nargs='?')
parser.add_argument('-a', '--autoreplay', action='store_true', default=False)
parser.add_argument('-n', '--no-clobber', action='store_true', default=False)
parser.add_argument('-t', '--type', nargs='?', choices=('list', 'sub'),
                    default='list')

args = parser.parse_args()

# Create out dir if not exist
if not os.path.exists(args.outdir):
    os.makedirs(args.outdir)

tmpdir = mkdtemp()
tmpdirs = [tmpdir]

# Use given rec dir or use tmp
if args.recdir:
    recdir = args.recdir
    if not os.path.exists(recdir):
        os.makedirs(recdir)
else:
    recdir = mkdtemp()
    tmpdirs.append(recdir)

config = SoundConfig(outdir=args.outdir,
                     recdir=recdir,
                     tmpdir=tmpdir,
                     autoreplay=args.autoreplay)

try:
    # Parse input
    parser = PARSERS[args.type](config, args.infile)
    drills = parser.parse()

    # Collect list of recordings without duplicates
    recs = []
    for d in drills:
        for r in d.recordings():
            if not r in recs:
                recs.append(r)

    # Record if needed
    for rec in recs:
        if not (args.no_clobber and rec.exist()):
            RecordCmd(config, rec).execute()

    # Generate final sounds
    for d in drills:
        d.sound().compute()

except (ParseError, RecordingError, SoundError) as e:
    sys.stderr.write(e.strerror)
    exit(1)

# Cleanup tmp dirs
for d in tmpdirs:
    shutil.rmtree(d)

exit(0)

# vim: set filetype=python
